/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category InitMint
 * @category generated
 */
export const InitMintStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number;
}>([["instructionDiscriminator", beet.u8]], "InitMintInstructionArgs");
/**
 * Accounts required by the _InitMint_ instruction
 *
 * @property [_writable_] mint
 * @property [_writable_] mintManager
 * @property [_writable_, **signer**] authority
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category InitMint
 * @category generated
 */
export type InitMintInstructionAccounts = {
  mint: web3.PublicKey;
  mintManager: web3.PublicKey;
  authority: web3.PublicKey;
  payer: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  systemProgram?: web3.PublicKey;
};

export const initMintInstructionDiscriminator = 0;

/**
 * Creates a _InitMint_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitMint
 * @category generated
 */
export function createInitMintInstruction(
  accounts: InitMintInstructionAccounts,
  programId = new web3.PublicKey("creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez")
) {
  const [data] = InitMintStruct.serialize({
    instructionDiscriminator: initMintInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.mint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mintManager,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
