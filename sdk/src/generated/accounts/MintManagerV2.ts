/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link MintManagerV2}
 * @category Accounts
 * @category generated
 */
export type MintManagerV2Args = {
  accountType: number;
  version: number;
  mint: web3.PublicKey;
  authority: web3.PublicKey;
  ruleset: web3.PublicKey;
};
/**
 * Holds the data for the {@link MintManagerV2} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class MintManagerV2 implements MintManagerV2Args {
  private constructor(
    readonly accountType: number,
    readonly version: number,
    readonly mint: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly ruleset: web3.PublicKey
  ) {}

  /**
   * Creates a {@link MintManagerV2} instance from the provided args.
   */
  static fromArgs(args: MintManagerV2Args) {
    return new MintManagerV2(
      args.accountType,
      args.version,
      args.mint,
      args.authority,
      args.ruleset
    );
  }

  /**
   * Deserializes the {@link MintManagerV2} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [MintManagerV2, number] {
    return MintManagerV2.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link MintManagerV2} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey
  ): Promise<MintManagerV2> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find MintManagerV2 account at ${address}`);
    }
    return MintManagerV2.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, mintManagerV2Beet);
  }

  /**
   * Deserializes the {@link MintManagerV2} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [MintManagerV2, number] {
    return mintManagerV2Beet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link MintManagerV2} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return mintManagerV2Beet.serialize(this);
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link MintManagerV2}
   */
  static get byteSize() {
    return mintManagerV2Beet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link MintManagerV2} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      MintManagerV2.byteSize,
      commitment
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link MintManagerV2} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === MintManagerV2.byteSize;
  }

  /**
   * Returns a readable version of {@link MintManagerV2} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      accountType: this.accountType,
      version: this.version,
      mint: this.mint.toBase58(),
      authority: this.authority.toBase58(),
      ruleset: this.ruleset.toBase58(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const mintManagerV2Beet = new beet.BeetStruct<
  MintManagerV2,
  MintManagerV2Args
>(
  [
    ["accountType", beet.u8],
    ["version", beet.u8],
    ["mint", beetSolana.publicKey],
    ["authority", beetSolana.publicKey],
    ["ruleset", beetSolana.publicKey],
  ],
  MintManagerV2.fromArgs,
  "MintManagerV2"
);
